/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace Told {
  export type PostStruct = {
    title: PromiseOrValue<string>;
    body: PromiseOrValue<string>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type PostStructOutput = [string, string, BigNumber] & {
    title: string;
    body: string;
    timestamp: BigNumber;
  };
}

export interface ToldInterface extends utils.Interface {
  functions: {
    "createPost(string,string)": FunctionFragment;
    "getPosts(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "createPost" | "getPosts"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createPost",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosts",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "createPost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPosts", data: BytesLike): Result;

  events: {};
}

export interface Told extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ToldInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createPost(
      title: PromiseOrValue<string>,
      content: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPosts(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[Told.PostStructOutput[]]>;
  };

  createPost(
    title: PromiseOrValue<string>,
    content: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPosts(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<Told.PostStructOutput[]>;

  callStatic: {
    createPost(
      title: PromiseOrValue<string>,
      content: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getPosts(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<Told.PostStructOutput[]>;
  };

  filters: {};

  estimateGas: {
    createPost(
      title: PromiseOrValue<string>,
      content: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPosts(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createPost(
      title: PromiseOrValue<string>,
      content: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPosts(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
