/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Told, ToldInterface } from "../Told";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "title",
        type: "string",
      },
      {
        internalType: "string",
        name: "content",
        type: "string",
      },
    ],
    name: "createPost",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "user",
        type: "address",
      },
    ],
    name: "getPosts",
    outputs: [
      {
        components: [
          {
            internalType: "string",
            name: "title",
            type: "string",
          },
          {
            internalType: "string",
            name: "body",
            type: "string",
          },
          {
            internalType: "uint256",
            name: "timestamp",
            type: "uint256",
          },
        ],
        internalType: "struct Told.Post[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a5a806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063392338f51461003b5780634caf9d0b14610057575b600080fd5b61005560048036038101906100509190610470565b610087565b005b610071600480360381019061006c9190610546565b61014b565b60405161007e9190610724565b60405180910390f35b600060405180606001604052808481526020018381526020014281525090506000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081908060018154018082558091505060019003906000526020600020906003020160009091909190915060008201518160000190816101239190610952565b5060208201518160010190816101399190610952565b50604082015181600201555050505050565b60606000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561030b57838290600052602060002090600302016040518060600160405290816000820180546101de90610775565b80601f016020809104026020016040519081016040528092919081815260200182805461020a90610775565b80156102575780601f1061022c57610100808354040283529160200191610257565b820191906000526020600020905b81548152906001019060200180831161023a57829003601f168201915b5050505050815260200160018201805461027090610775565b80601f016020809104026020016040519081016040528092919081815260200182805461029c90610775565b80156102e95780601f106102be576101008083540402835291602001916102e9565b820191906000526020600020905b8154815290600101906020018083116102cc57829003601f168201915b50505050508152602001600282015481525050815260200190600101906101ab565b505050509050919050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61037d82610334565b810181811067ffffffffffffffff8211171561039c5761039b610345565b5b80604052505050565b60006103af610316565b90506103bb8282610374565b919050565b600067ffffffffffffffff8211156103db576103da610345565b5b6103e482610334565b9050602081019050919050565b82818337600083830152505050565b600061041361040e846103c0565b6103a5565b90508281526020810184848401111561042f5761042e61032f565b5b61043a8482856103f1565b509392505050565b600082601f8301126104575761045661032a565b5b8135610467848260208601610400565b91505092915050565b6000806040838503121561048757610486610320565b5b600083013567ffffffffffffffff8111156104a5576104a4610325565b5b6104b185828601610442565b925050602083013567ffffffffffffffff8111156104d2576104d1610325565b5b6104de85828601610442565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610513826104e8565b9050919050565b61052381610508565b811461052e57600080fd5b50565b6000813590506105408161051a565b92915050565b60006020828403121561055c5761055b610320565b5b600061056a84828501610531565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156105d95780820151818401526020810190506105be565b60008484015250505050565b60006105f08261059f565b6105fa81856105aa565b935061060a8185602086016105bb565b61061381610334565b840191505092915050565b6000819050919050565b6106318161061e565b82525050565b6000606083016000830151848203600086015261065482826105e5565b9150506020830151848203602086015261066e82826105e5565b91505060408301516106836040860182610628565b508091505092915050565b600061069a8383610637565b905092915050565b6000602082019050919050565b60006106ba82610573565b6106c4818561057e565b9350836020820285016106d68561058f565b8060005b8581101561071257848403895281516106f3858261068e565b94506106fe836106a2565b925060208a019950506001810190506106da565b50829750879550505050505092915050565b6000602082019050818103600083015261073e81846106af565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061078d57607f821691505b6020821081036107a05761079f610746565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026108087fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826107cb565b61081286836107cb565b95508019841693508086168417925050509392505050565b6000819050919050565b600061084f61084a6108458461061e565b61082a565b61061e565b9050919050565b6000819050919050565b61086983610834565b61087d61087582610856565b8484546107d8565b825550505050565b600090565b610892610885565b61089d818484610860565b505050565b5b818110156108c1576108b660008261088a565b6001810190506108a3565b5050565b601f821115610906576108d7816107a6565b6108e0846107bb565b810160208510156108ef578190505b6109036108fb856107bb565b8301826108a2565b50505b505050565b600082821c905092915050565b60006109296000198460080261090b565b1980831691505092915050565b60006109428383610918565b9150826002028217905092915050565b61095b8261059f565b67ffffffffffffffff81111561097457610973610345565b5b61097e8254610775565b6109898282856108c5565b600060209050601f8311600181146109bc57600084156109aa578287015190505b6109b48582610936565b865550610a1c565b601f1984166109ca866107a6565b60005b828110156109f2578489015182556001820191506020850194506020810190506109cd565b86831015610a0f5784890151610a0b601f891682610918565b8355505b6001600288020188555050505b50505050505056fea2646970667358221220d75348080752fc8a71b9307237bcfa7a15c8b297a574506324596fd7d04aae0964736f6c63430008110033";

type ToldConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ToldConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Told__factory extends ContractFactory {
  constructor(...args: ToldConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Told> {
    return super.deploy(overrides || {}) as Promise<Told>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Told {
    return super.attach(address) as Told;
  }
  override connect(signer: Signer): Told__factory {
    return super.connect(signer) as Told__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ToldInterface {
    return new utils.Interface(_abi) as ToldInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Told {
    return new Contract(address, _abi, signerOrProvider) as Told;
  }
}
