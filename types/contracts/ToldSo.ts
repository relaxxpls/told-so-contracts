/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace ToldSo {
  export type PostStruct = {
    title: PromiseOrValue<string>;
    body: PromiseOrValue<string>;
    media: PromiseOrValue<string>;
    timestamp: PromiseOrValue<BigNumberish>;
  };

  export type PostStructOutput = [string, string, string, BigNumber] & {
    title: string;
    body: string;
    media: string;
    timestamp: BigNumber;
  };
}

export interface ToldSoInterface extends utils.Interface {
  functions: {
    "createPost(string,string,string)": FunctionFragment;
    "getPosts(address)": FunctionFragment;
    "updatePost(uint256,string,string,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "createPost" | "getPosts" | "updatePost"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createPost",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePost",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "createPost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPosts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updatePost", data: BytesLike): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "PostCreated(address,tuple)": EventFragment;
    "PostUpdated(address,tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PostCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PostUpdated"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PostCreatedEventObject {
  author: string;
  post: ToldSo.PostStructOutput;
}
export type PostCreatedEvent = TypedEvent<
  [string, ToldSo.PostStructOutput],
  PostCreatedEventObject
>;

export type PostCreatedEventFilter = TypedEventFilter<PostCreatedEvent>;

export interface PostUpdatedEventObject {
  author: string;
  post: ToldSo.PostStructOutput;
}
export type PostUpdatedEvent = TypedEvent<
  [string, ToldSo.PostStructOutput],
  PostUpdatedEventObject
>;

export type PostUpdatedEventFilter = TypedEventFilter<PostUpdatedEvent>;

export interface ToldSo extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ToldSoInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createPost(
      title: PromiseOrValue<string>,
      body: PromiseOrValue<string>,
      media: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPosts(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[ToldSo.PostStructOutput[]]>;

    updatePost(
      idx: PromiseOrValue<BigNumberish>,
      title: PromiseOrValue<string>,
      body: PromiseOrValue<string>,
      media: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createPost(
    title: PromiseOrValue<string>,
    body: PromiseOrValue<string>,
    media: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPosts(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ToldSo.PostStructOutput[]>;

  updatePost(
    idx: PromiseOrValue<BigNumberish>,
    title: PromiseOrValue<string>,
    body: PromiseOrValue<string>,
    media: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createPost(
      title: PromiseOrValue<string>,
      body: PromiseOrValue<string>,
      media: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getPosts(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ToldSo.PostStructOutput[]>;

    updatePost(
      idx: PromiseOrValue<BigNumberish>,
      title: PromiseOrValue<string>,
      body: PromiseOrValue<string>,
      media: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "PostCreated(address,tuple)"(
      author?: PromiseOrValue<string> | null,
      post?: null
    ): PostCreatedEventFilter;
    PostCreated(
      author?: PromiseOrValue<string> | null,
      post?: null
    ): PostCreatedEventFilter;

    "PostUpdated(address,tuple)"(
      author?: PromiseOrValue<string> | null,
      post?: null
    ): PostUpdatedEventFilter;
    PostUpdated(
      author?: PromiseOrValue<string> | null,
      post?: null
    ): PostUpdatedEventFilter;
  };

  estimateGas: {
    createPost(
      title: PromiseOrValue<string>,
      body: PromiseOrValue<string>,
      media: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPosts(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updatePost(
      idx: PromiseOrValue<BigNumberish>,
      title: PromiseOrValue<string>,
      body: PromiseOrValue<string>,
      media: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createPost(
      title: PromiseOrValue<string>,
      body: PromiseOrValue<string>,
      media: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPosts(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updatePost(
      idx: PromiseOrValue<BigNumberish>,
      title: PromiseOrValue<string>,
      body: PromiseOrValue<string>,
      media: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
